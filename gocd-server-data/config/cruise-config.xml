<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="108">
  <server artifactsdir="artifacts" agentAutoRegisterKey="c53fcbb4-0f35-49bc-8186-b3272d15d6ff" webhookSecret="f18a575c-1a45-4004-8c17-8baf03142cec" commandRepositoryLocation="default" serverId="8aca620d-7e8e-4acf-9e9f-f81a1780f880" tokenGenerationKey="b792ec27-487b-4047-a0b4-bbd8c65959db">
    <security>
      <authConfigs>
        <authConfig id="passwordfile" pluginId="cd.go.authentication.passwordfile">
          <property>
            <key>PasswordFilePath</key>
            <value>/godata/password.properties</value>
          </property>
        </authConfig>
        <authConfig id="github-oauth" pluginId="cd.go.authorization.github">
          <property>
            <key>ClientId</key>
            <encryptedValue>fwL5mCLSwUVCT0CC4KuXtUAKni0j+a+0</encryptedValue>
          </property>
          <property>
            <key>ClientSecret</key>
            <encryptedValue>B9XQrPJQ1O/0wmExsi1NVpj6ndPc9JK0XGumOwRlCKq+hrRMPGUFKFW7A9AMxdW6</encryptedValue>
          </property>
          <property>
            <key>AuthenticateWith</key>
            <value>GitHub</value>
          </property>
          <property>
            <key>GitHubEnterpriseUrl</key>
            <value />
          </property>
          <property>
            <key>AllowedOrganizations</key>
            <value />
          </property>
          <property>
            <key>AuthorizeUsing</key>
            <value>PersonalAccessToken</value>
          </property>
          <property>
            <key>PersonalAccessToken</key>
            <encryptedValue>jx9foYzkwtMgWr/TYZS90ONgd1vcq0wo99MYZmYnoiagZjYGpOFWE23vVgIUZG3b</encryptedValue>
          </property>
        </authConfig>
        <authConfig id="google-oauth" pluginId="cd.go.authorization.google">
          <property>
            <key>ClientId</key>
            <encryptedValue>qRMvOjwubZagzKZmx6YYGw5bG+Er3xPViDelxFTupcDFNVj9KKIC3IMsA24YdR+xGsRekN/5BNvwDkM37MYBSK8Eh2QuFYeDXvQr/BqX5vU=</encryptedValue>
          </property>
          <property>
            <key>ClientSecret</key>
            <encryptedValue>kwlbyQll4o5MfLGbdSm/6L6HEFRGjF6md5061YEpOCU=</encryptedValue>
          </property>
          <property>
            <key>AllowedDomains</key>
            <value>gmail.com</value>
          </property>
        </authConfig>
      </authConfigs>
      <roles>
        <role name="admins">
          <users>
            <user>admin</user>
          </users>
        </role>
        <role name="view-only">
          <users>
            <user>guest</user>
          </users>
        </role>
        <pluginRole name="github-dailybrain-members" authConfigId="github-oauth">
          <property>
            <key>Organizations</key>
            <value>dailybrain</value>
          </property>
          <property>
            <key>Teams</key>
            <value />
          </property>
          <property>
            <key>Users</key>
            <value />
          </property>
        </pluginRole>
      </roles>
      <admins>
        <user>admin</user>
      </admins>
    </security>
  </server>
  <pipelines group="Platform">
    <authorization>
      <view>
        <role>view-only</role>
        <role>github-dailybrain-members</role>
      </view>
      <operate>
        <role>github-dailybrain-members</role>
      </operate>
      <admins>
        <role>admins</role>
      </admins>
    </authorization>
    <pipeline name="Check_Platform" labeltemplate="${git[:7]}" lockBehavior="none">
      <materials>
        <git url="https://github.com/iwx1/gocd-demo" shallowClone="true" materialName="git" />
      </materials>
      <stage name="ready-stage">
        <jobs>
          <job name="ready-job">
            <tasks>
              <exec command="echo">
                <arg>"ready"</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="check-install-stage">
        <jobs>
          <job name="npm-check">
            <tasks>
              <exec command="bash">
                <arg>-lc</arg>
                <arg>npm version</arg>
              </exec>
            </tasks>
            <resources>
              <resource>npm</resource>
            </resources>
          </job>
          <job name="jdk-check">
            <tasks>
              <exec command="javac">
                <arg>-version</arg>
              </exec>
            </tasks>
            <resources>
              <resource>jdk</resource>
            </resources>
          </job>
          <job name="golang-check">
            <tasks>
              <exec command="go">
                <arg>version</arg>
              </exec>
            </tasks>
            <resources>
              <resource>golang</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="MicroServices">
    <authorization>
      <view>
        <role>admins</role>
        <role>view-only</role>
      </view>
      <operate>
        <role>admins</role>
      </operate>
      <admins>
        <role>admins</role>
      </admins>
    </authorization>
    <pipeline name="ServiceA" labeltemplate="${ServiceA[:7]}">
      <materials>
        <git url="https://github.com/iwx1/gocd-demo" materialName="ServiceA" />
      </materials>
      <stage name="dummyStage">
        <jobs>
          <job name="dummyJob">
            <tasks>
              <exec command="echo">
                <arg>"ok"</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ServiceB" labeltemplate="${ServiceB[:7]}">
      <materials>
        <git url="https://github.com/iwx1/gocd-demo" materialName="ServiceB" />
      </materials>
      <stage name="dummyStage" fetchMaterials="false">
        <jobs>
          <job name="dummyJob">
            <tasks>
              <exec command="echo">
                <arg>"ok"</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ServiceC" labeltemplate="${ServiceC[:7]}">
      <materials>
        <pipeline pipelineName="ServiceA" stageName="dummyStage" materialName="ServiceA" />
        <pipeline pipelineName="ServiceB" stageName="dummyStage" materialName="ServiceB" />
        <git url="https://github.com/iwx1/gocd-demo" materialName="ServiceC" />
      </materials>
      <stage name="dummyStage" fetchMaterials="false">
        <jobs>
          <job name="dummyJob">
            <tasks>
              <exec command="echo">
                <arg>"ok"</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="React_Boilerplate">
    <authorization>
      <view>
        <role>admins</role>
        <role>view-only</role>
      </view>
      <operate>
        <role>admins</role>
      </operate>
      <admins>
        <role>admins</role>
      </admins>
    </authorization>
    <pipeline name="Build" labeltemplate="${react-boilerplate-sample[:7]}">
      <materials>
        <git url="https://github.com/iwx1/react-boilerplate-sample" shallowClone="true" materialName="react-boilerplate-sample" />
      </materials>
      <stage name="setup" cleanWorkingDir="true">
        <jobs>
          <job name="npm-install">
            <tasks>
              <exec command="bash">
                <arg>-lc</arg>
                <arg>npm install</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>zip --symlinks -r -q dist.$GO_PIPELINE_LABEL.zip .</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>npm</resource>
            </resources>
            <artifacts>
              <artifact type="build" src="dist.*.zip" dest="dist" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="lint" fetchMaterials="false" cleanWorkingDir="true">
        <jobs>
          <job name="npm-lint">
            <tasks>
              <fetchartifact origin="gocd" srcdir="dist" pipeline="Build" stage="setup" job="npm-install">
                <runif status="passed" />
              </fetchartifact>
              <exec command="unzip" workingdir="dist">
                <arg>-qq</arg>
                <arg>*.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="dist">
                <arg>-lc</arg>
                <arg>npm run lint</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>npm</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="unit-test" fetchMaterials="false" cleanWorkingDir="true">
        <jobs>
          <job name="npm-test">
            <tasks>
              <fetchartifact origin="gocd" srcdir="dist" pipeline="Build" stage="setup" job="npm-install">
                <runif status="passed" />
              </fetchartifact>
              <exec command="unzip" workingdir="dist">
                <arg>-qq</arg>
                <arg>*.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="dist">
                <arg>-lc</arg>
                <arg>npm run test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>npm</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="build" fetchMaterials="false" cleanWorkingDir="true">
        <jobs>
          <job name="npm-build">
            <tasks>
              <fetchartifact origin="gocd" srcdir="dist" pipeline="Build" stage="setup" job="npm-install">
                <runif status="passed" />
              </fetchartifact>
              <exec command="unzip" workingdir="dist">
                <arg>-qq</arg>
                <arg>*.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="dist">
                <arg>-lc</arg>
                <arg>npm run build</arg>
              </exec>
              <exec command="bash" workingdir="dist/build">
                <arg>-c</arg>
                <arg>zip --symlinks -r -q build.$GO_PIPELINE_LABEL.zip .</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>npm</resource>
            </resources>
            <artifacts>
              <artifact type="build" src="dist/build/build.*.zip" dest="build" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="DeployToDemo" labeltemplate="${react-boilerplate-sample[:7]}" template="DeployTemplate">
      <params>
        <param name="pipelineName">Build</param>
      </params>
      <materials>
        <pipeline pipelineName="Build" stageName="build" materialName="react-boilerplate-sample" />
      </materials>
    </pipeline>
    <pipeline name="ReviewDemo" labeltemplate="${react-boilerplate-sample[:7]}">
      <materials>
        <pipeline pipelineName="DeployToDemo" stageName="deploy" materialName="react-boilerplate-sample" />
      </materials>
      <stage name="review" fetchMaterials="false">
        <jobs>
          <job name="review">
            <tasks>
              <exec command="echo">
                <arg>"review"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="validate" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="validate">
            <tasks>
              <exec command="echo">
                <arg>"validated"</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Analysis" labeltemplate="${react-boilerplate-sample[:7]}">
      <materials>
        <pipeline pipelineName="DeployToDemo" stageName="deploy" materialName="react-boilerplate-sample" />
      </materials>
      <stage name="coverage" fetchMaterials="false" cleanWorkingDir="true">
        <jobs>
          <job name="npm-coverage">
            <tasks>
              <fetchartifact origin="gocd" srcdir="dist" pipeline="Build/DeployToDemo" stage="setup" job="npm-install">
                <runif status="passed" />
              </fetchartifact>
              <exec command="unzip" workingdir="dist">
                <arg>-qq</arg>
                <arg>*.zip</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="dist">
                <arg>-lc</arg>
                <arg>npm run test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="Coverage" path="coverage/lcov-report/index.html" />
            </tabs>
            <resources>
              <resource>npm</resource>
            </resources>
            <artifacts>
              <artifact type="test" src="dist/coverage/*" dest="coverage" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="DeployToProd" labeltemplate="${react-boilerplate-sample[:7]}" template="DeployTemplate">
      <params>
        <param name="pipelineName">Build/DeployToDemo/ReviewDemo</param>
      </params>
      <materials>
        <pipeline pipelineName="ReviewDemo" stageName="validate" materialName="react-boilerplate-sample" />
        <pipeline pipelineName="Analysis" stageName="coverage" materialName="analysis" />
      </materials>
    </pipeline>
  </pipelines>
  <templates>
    <pipeline name="DeployTemplate">
      <authorization>
        <admins>
          <user>admin</user>
        </admins>
      </authorization>
      <stage name="deploy" fetchMaterials="false" cleanWorkingDir="true">
        <jobs>
          <job name="deploy">
            <tasks>
              <fetchartifact origin="gocd" srcdir="build" pipeline="#{pipelineName}" stage="build" job="npm-build">
                <runif status="passed" />
              </fetchartifact>
              <exec command="find">
                <arg>.</arg>
              </exec>
              <exec command="bash">
                <arg>-lc</arg>
                <arg>ssh -o StrictHostKeyChecking=no -i $DEPLOY_KEY $DEPLOY_USER@$DEPLOY_HOST "rm -rf /var/www/html"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-lc</arg>
                <arg>ssh -o StrictHostKeyChecking=no -i $DEPLOY_KEY $DEPLOY_USER@$DEPLOY_HOST "mkdir -p /var/www/html"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>scp -o StrictHostKeyChecking=no -i $DEPLOY_KEY build/*.zip $DEPLOY_USER@$DEPLOY_HOST:/var/www/html</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ssh -o StrictHostKeyChecking=no -i $DEPLOY_KEY $DEPLOY_USER@$DEPLOY_HOST "cd /var/www/html; unzip -qq *.zip"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ssh -o StrictHostKeyChecking=no -i $DEPLOY_KEY $DEPLOY_USER@$DEPLOY_HOST "rm /var/www/html/*.zip"</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>ssh -o StrictHostKeyChecking=no -i $DEPLOY_KEY $DEPLOY_USER@$DEPLOY_HOST "/etc/init.d/apache2 restart"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>deploy</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </templates>
  <environments>
    <environment name="Build">
      <agents>
        <physical uuid="f2916d64-7652-49ea-bebb-73e01abdbac0" />
        <physical uuid="75f58fa6-171d-4f9f-9df5-5eee95233eeb" />
        <physical uuid="59568c1b-a483-4c12-a4b0-6f53f4e45d02" />
        <physical uuid="745a031f-215a-476d-be59-1d29d91296ee" />
        <physical uuid="5759d9f7-edb1-4103-81f1-ab4bc6506646" />
      </agents>
      <pipelines>
        <pipeline name="Build" />
        <pipeline name="Check_Platform" />
        <pipeline name="ServiceA" />
        <pipeline name="ServiceB" />
        <pipeline name="ServiceC" />
      </pipelines>
    </environment>
    <environment name="Demo">
      <environmentvariables>
        <variable name="DEPLOY_KEY">
          <value>/home/go/.ssh/gocd_agent_rsa</value>
        </variable>
        <variable name="DEPLOY_USER">
          <value>root</value>
        </variable>
        <variable name="DEPLOY_HOST">
          <value>webserver-demo</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="f2916d64-7652-49ea-bebb-73e01abdbac0" />
        <physical uuid="75f58fa6-171d-4f9f-9df5-5eee95233eeb" />
        <physical uuid="59568c1b-a483-4c12-a4b0-6f53f4e45d02" />
        <physical uuid="745a031f-215a-476d-be59-1d29d91296ee" />
        <physical uuid="5759d9f7-edb1-4103-81f1-ab4bc6506646" />
      </agents>
      <pipelines>
        <pipeline name="Analysis" />
        <pipeline name="DeployToDemo" />
        <pipeline name="ReviewDemo" />
      </pipelines>
    </environment>
    <environment name="Prod">
      <environmentvariables>
        <variable name="DEPLOY_KEY">
          <value>/home/go/.ssh/gocd_agent_rsa</value>
        </variable>
        <variable name="DEPLOY_USER">
          <value>root</value>
        </variable>
        <variable name="DEPLOY_HOST">
          <value>webserver-prod</value>
        </variable>
      </environmentvariables>
      <agents>
        <physical uuid="59568c1b-a483-4c12-a4b0-6f53f4e45d02" />
      </agents>
      <pipelines>
        <pipeline name="DeployToProd" />
      </pipelines>
    </environment>
  </environments>
  <agents>
    <agent hostname="Ubuntu Golang Agent" ipaddress="172.18.0.5" uuid="f2916d64-7652-49ea-bebb-73e01abdbac0">
      <resources>
        <resource>linux</resource>
        <resource>golang</resource>
        <resource>go</resource>
      </resources>
    </agent>
    <agent hostname="Ubuntu NodeJS Agent" ipaddress="172.18.0.6" uuid="75f58fa6-171d-4f9f-9df5-5eee95233eeb">
      <resources>
        <resource>linux</resource>
        <resource>node</resource>
        <resource>npm</resource>
        <resource>nvm</resource>
      </resources>
    </agent>
    <agent hostname="Ubuntu Agent" ipaddress="172.18.0.9" uuid="59568c1b-a483-4c12-a4b0-6f53f4e45d02">
      <resources>
        <resource>linux</resource>
        <resource>deploy</resource>
      </resources>
    </agent>
    <agent hostname="Ubuntu NodeJS Agent" ipaddress="172.18.0.7" uuid="745a031f-215a-476d-be59-1d29d91296ee">
      <resources>
        <resource>linux</resource>
        <resource>node</resource>
        <resource>npm</resource>
        <resource>nvm</resource>
      </resources>
    </agent>
    <agent hostname="CentOS JDK Agent" ipaddress="172.18.0.8" uuid="5759d9f7-edb1-4103-81f1-ab4bc6506646">
      <resources>
        <resource>linux</resource>
        <resource>java</resource>
        <resource>jre</resource>
        <resource>jdk</resource>
      </resources>
    </agent>
  </agents>
</cruise>
